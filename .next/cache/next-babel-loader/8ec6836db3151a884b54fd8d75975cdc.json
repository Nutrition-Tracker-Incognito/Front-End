{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/home/doublebridges/projects/next-example/lib/user.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, createContext } from 'react';\nimport fetch from 'isomorphic-unfetch'; // Use a global to save the user, so we don't have to fetch it again after page navigations\n\nvar userState;\nvar User = createContext({\n  user: null,\n  loading: false\n});\nexport var fetchUser = function fetchUser() {\n  var res;\n  return _regeneratorRuntime.async(function fetchUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(userState !== undefined)) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\", userState);\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch('/api/me'));\n\n        case 4:\n          res = _context.sent;\n\n          if (!res.ok) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 8:\n          _context.t0 = _context.sent;\n          _context.next = 12;\n          break;\n\n        case 11:\n          _context.t0 = null;\n\n        case 12:\n          userState = _context.t0;\n          console.log(\"user.js: fetchUser: userState=\".concat(userState, \" res.ok=\").concat(res.ok, \" res=\").concat(res), res.ok, userState);\n          return _context.abrupt(\"return\", userState);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var UserProvider = function UserProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n  var user = value.user; // If the user was fetched in SSR add it to userState so we don't fetch it again\n\n  useEffect(function () {\n    if (!userState && user) {\n      userState = user;\n    }\n  }, []);\n  return __jsx(User.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, children);\n};\nexport var useUser = function useUser() {\n  console.log(\"user.js: useUser: User=\", User);\n  return useContext(User);\n};\nexport var useFetchUser = function useFetchUser() {\n  var _useState = useState({\n    user: userState || null,\n    loading: userState === undefined\n  }),\n      data = _useState[0],\n      setUser = _useState[1];\n\n  useEffect(function () {\n    if (userState !== undefined) {\n      return;\n    }\n\n    var isMounted = true;\n    fetchUser().then(function (user) {\n      // Only set the user if the component is still mounted\n      if (isMounted) {\n        setUser({\n          user: user,\n          loading: false\n        });\n      }\n    });\n    return function () {\n      isMounted = false;\n    };\n  }, [userState]);\n  return data;\n};","map":{"version":3,"sources":["/home/doublebridges/projects/next-example/lib/user.js"],"names":["useState","useEffect","createContext","fetch","userState","User","user","loading","fetchUser","undefined","res","ok","json","console","log","UserProvider","value","children","useUser","useContext","useFetchUser","data","setUser","isMounted","then"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,aAA9B,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;;AACA,IAAIC,SAAJ;AAEA,IAAMC,IAAI,GAAGH,aAAa,CAAC;AAAEI,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,OAAO,EAAE;AAAvB,CAAD,CAA1B;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACnBJ,SAAS,KAAKK,SADK;AAAA;AAAA;AAAA;;AAAA,2CAEdL,SAFc;;AAAA;AAAA;AAAA,2CAKLD,KAAK,CAAC,SAAD,CALA;;AAAA;AAKjBO,UAAAA,GALiB;;AAAA,eAMXA,GAAG,CAACC,EANO;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAMID,GAAG,CAACE,IAAJ,EANJ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,wBAMiB,IANjB;;AAAA;AAMvBR,UAAAA,SANuB;AAOvBS,UAAAA,OAAO,CAACC,GAAR,yCAA6CV,SAA7C,qBAAiEM,GAAG,CAACC,EAArE,kBAA+ED,GAA/E,GAAsFA,GAAG,CAACC,EAA1F,EAA8FP,SAA9F;AAPuB,2CAQhBA,SARgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;AAWP,OAAO,IAAMW,YAAY,GAAG,SAAfA,YAAe,OAAyB;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAAA,MAC3CX,IAD2C,GAClCU,KADkC,CAC3CV,IAD2C,EAGnD;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACG,SAAD,IAAcE,IAAlB,EAAwB;AACtBF,MAAAA,SAAS,GAAGE,IAAZ;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,MAAC,IAAD,CAAM,QAAN;AAAe,IAAA,KAAK,EAAEU,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BC,QAA9B,CAAP;AACD,CAXM;AAaP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAC3BL,EAAAA,OAAO,CAACC,GAAR,4BAAuCT,IAAvC;AACA,SAAOc,UAAU,CAACd,IAAD,CAAjB;AACD,CAHM;AAKP,OAAO,IAAMe,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,kBACRpB,QAAQ,CAAC;AAC/BM,IAAAA,IAAI,EAAEF,SAAS,IAAI,IADY;AAE/BG,IAAAA,OAAO,EAAEH,SAAS,KAAKK;AAFQ,GAAD,CADA;AAAA,MACzBY,IADyB;AAAA,MACnBC,OADmB;;AAMhCrB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIG,SAAS,KAAKK,SAAlB,EAA6B;AAC3B;AACD;;AAED,QAAIc,SAAS,GAAG,IAAhB;AAEAf,IAAAA,SAAS,GAAGgB,IAAZ,CAAiB,UAAAlB,IAAI,EAAI;AACvB;AACA,UAAIiB,SAAJ,EAAe;AACbD,QAAAA,OAAO,CAAC;AAAEhB,UAAAA,IAAI,EAAJA,IAAF;AAAQC,UAAAA,OAAO,EAAE;AAAjB,SAAD,CAAP;AACD;AACF,KALD;AAOA,WAAO,YAAM;AACXgB,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACnB,SAAD,CAjBM,CAAT;AAmBA,SAAOiB,IAAP;AACD,CA1BM","sourcesContent":["import { useState, useEffect, createContext } from 'react';\nimport fetch from 'isomorphic-unfetch';\n\n// Use a global to save the user, so we don't have to fetch it again after page navigations\nlet userState;\n\nconst User = createContext({ user: null, loading: false });\n\nexport const fetchUser = async () => {\n  if (userState !== undefined) {\n    return userState;\n  }\n\n  const res = await fetch('/api/me');\n  userState = res.ok ? await res.json() : null;\n  console.log(`user.js: fetchUser: userState=${userState} res.ok=${res.ok} res=${res}`, res.ok, userState);\n  return userState;\n};\n\nexport const UserProvider = ({ value, children }) => {\n  const { user } = value;\n\n  // If the user was fetched in SSR add it to userState so we don't fetch it again\n  useEffect(() => {\n    if (!userState && user) {\n      userState = user;\n    }\n  }, []);\n\n  return <User.Provider value={value}>{children}</User.Provider>;\n};\n\nexport const useUser = () => {\n  console.log(`user.js: useUser: User=`, User)\n  return useContext(User)\n};\n\nexport const useFetchUser = () => {\n  const [data, setUser] = useState({\n    user: userState || null,\n    loading: userState === undefined\n  });\n\n  useEffect(() => {\n    if (userState !== undefined) {\n      return;\n    }\n\n    let isMounted = true;\n\n    fetchUser().then(user => {\n      // Only set the user if the component is still mounted\n      if (isMounted) {\n        setUser({ user, loading: false });\n      }\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [userState]);\n\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}