{"ast":null,"code":"var _jsxFileName = \"/home/doublebridges/projects/next-example/lib/user.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport fetch from 'isomorphic-unfetch'; // Use a global to save the user, so we don't have to fetch it again after page navigations\n\nlet userState;\nconst User = createContext({\n  user: null,\n  loading: false\n});\nexport const fetchUser = async () => {\n  if (userState !== undefined) {\n    return userState;\n  }\n\n  const res = await fetch('/api/me');\n  userState = res.ok ? await res.json() : null;\n  console.log(`user.js: fetchUser: userState=${userState} res.ok=${res.ok} res=${res}`, res.ok, userState);\n  return userState;\n};\nexport const UserProvider = ({\n  value,\n  children\n}) => {\n  const {\n    user\n  } = value; // If the user was fetched in SSR add it to userState so we don't fetch it again\n\n  useEffect(() => {\n    if (!userState && user) {\n      userState = user;\n    }\n  }, []);\n  return __jsx(User.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, children);\n};\nexport const useUser = () => {\n  console.log(`user.js: useUser: User=`, User);\n  return useContext(User);\n};\nexport const useFetchUser = () => {\n  const {\n    0: data,\n    1: setUser\n  } = useState({\n    user: userState || null,\n    loading: userState === undefined\n  });\n  useEffect(() => {\n    if (userState !== undefined) {\n      return;\n    }\n\n    let isMounted = true;\n    fetchUser().then(user => {\n      // Only set the user if the component is still mounted\n      if (isMounted) {\n        setUser({\n          user,\n          loading: false\n        });\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, [userState]);\n  return data;\n};","map":{"version":3,"sources":["/home/doublebridges/projects/next-example/lib/user.js"],"names":["useState","useEffect","createContext","useContext","fetch","userState","User","user","loading","fetchUser","undefined","res","ok","json","console","log","UserProvider","value","children","useUser","useFetchUser","data","setUser","isMounted","then"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,aAA9B,EAA6CC,UAA7C,QAA+D,OAA/D;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;;AACA,IAAIC,SAAJ;AAEA,MAAMC,IAAI,GAAGJ,aAAa,CAAC;AAAEK,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,OAAO,EAAE;AAAvB,CAAD,CAA1B;AAEA,OAAO,MAAMC,SAAS,GAAG,YAAY;AACnC,MAAIJ,SAAS,KAAKK,SAAlB,EAA6B;AAC3B,WAAOL,SAAP;AACD;;AAED,QAAMM,GAAG,GAAG,MAAMP,KAAK,CAAC,SAAD,CAAvB;AACAC,EAAAA,SAAS,GAAGM,GAAG,CAACC,EAAJ,GAAS,MAAMD,GAAG,CAACE,IAAJ,EAAf,GAA4B,IAAxC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,iCAAgCV,SAAU,WAAUM,GAAG,CAACC,EAAG,QAAOD,GAAI,EAAnF,EAAsFA,GAAG,CAACC,EAA1F,EAA8FP,SAA9F;AACA,SAAOA,SAAP;AACD,CATM;AAWP,OAAO,MAAMW,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB;AACnD,QAAM;AAAEX,IAAAA;AAAF,MAAWU,KAAjB,CADmD,CAGnD;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACI,SAAD,IAAcE,IAAlB,EAAwB;AACtBF,MAAAA,SAAS,GAAGE,IAAZ;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,MAAC,IAAD,CAAM,QAAN;AAAe,IAAA,KAAK,EAAEU,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BC,QAA9B,CAAP;AACD,CAXM;AAaP,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3BL,EAAAA,OAAO,CAACC,GAAR,CAAa,yBAAb,EAAuCT,IAAvC;AACA,SAAOH,UAAU,CAACG,IAAD,CAAjB;AACD,CAHM;AAKP,OAAO,MAAMc,YAAY,GAAG,MAAM;AAChC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBtB,QAAQ,CAAC;AAC/BO,IAAAA,IAAI,EAAEF,SAAS,IAAI,IADY;AAE/BG,IAAAA,OAAO,EAAEH,SAAS,KAAKK;AAFQ,GAAD,CAAhC;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,SAAS,KAAKK,SAAlB,EAA6B;AAC3B;AACD;;AAED,QAAIa,SAAS,GAAG,IAAhB;AAEAd,IAAAA,SAAS,GAAGe,IAAZ,CAAiBjB,IAAI,IAAI;AACvB;AACA,UAAIgB,SAAJ,EAAe;AACbD,QAAAA,OAAO,CAAC;AAAEf,UAAAA,IAAF;AAAQC,UAAAA,OAAO,EAAE;AAAjB,SAAD,CAAP;AACD;AACF,KALD;AAOA,WAAO,MAAM;AACXe,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAAClB,SAAD,CAjBM,CAAT;AAmBA,SAAOgB,IAAP;AACD,CA1BM","sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\nimport fetch from 'isomorphic-unfetch';\n\n// Use a global to save the user, so we don't have to fetch it again after page navigations\nlet userState;\n\nconst User = createContext({ user: null, loading: false });\n\nexport const fetchUser = async () => {\n  if (userState !== undefined) {\n    return userState;\n  }\n\n  const res = await fetch('/api/me');\n  userState = res.ok ? await res.json() : null;\n  console.log(`user.js: fetchUser: userState=${userState} res.ok=${res.ok} res=${res}`, res.ok, userState);\n  return userState;\n};\n\nexport const UserProvider = ({ value, children }) => {\n  const { user } = value;\n\n  // If the user was fetched in SSR add it to userState so we don't fetch it again\n  useEffect(() => {\n    if (!userState && user) {\n      userState = user;\n    }\n  }, []);\n\n  return <User.Provider value={value}>{children}</User.Provider>;\n};\n\nexport const useUser = () => {\n  console.log(`user.js: useUser: User=`, User)\n  return useContext(User)\n};\n\nexport const useFetchUser = () => {\n  const [data, setUser] = useState({\n    user: userState || null,\n    loading: userState === undefined\n  });\n\n  useEffect(() => {\n    if (userState !== undefined) {\n      return;\n    }\n\n    let isMounted = true;\n\n    fetchUser().then(user => {\n      // Only set the user if the component is still mounted\n      if (isMounted) {\n        setUser({ user, loading: false });\n      }\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [userState]);\n\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}