{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch'; // Use a global to save the user, so we don't have to fetch it again after page navigations\n\nlet userState;\nconst User = React.createContext({\n  user: null,\n  loading: false\n});\nexport const fetchUser = async () => {\n  if (userState !== undefined) {\n    return userState;\n  }\n\n  const res = await fetch('/api/me');\n  userState = res.ok ? await res.json() : null;\n  console.log(userState);\n  return userState;\n};\nexport const UserProvider = ({\n  value,\n  children\n}) => {\n  const {\n    user\n  } = value; // If the user was fetched in SSR add it to userState so we don't fetch it again\n\n  React.useEffect(() => {\n    if (!userState && user) {\n      userState = user;\n    }\n  }, []);\n  return __jsx(User.Provider, {\n    value: value\n  }, children);\n};\nexport const useUser = () => React.useContext(User);\nexport const useFetchUser = () => {\n  const [data, setUser] = React.useState({\n    user: userState || null,\n    loading: userState === undefined\n  });\n  React.useEffect(() => {\n    if (userState !== undefined) {\n      return;\n    }\n\n    let isMounted = true;\n    fetchUser().then(user => {\n      // Only set the user if the component is still mounted\n      if (isMounted) {\n        setUser({\n          user,\n          loading: false\n        });\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, [userState]);\n  return data;\n};","map":null,"metadata":{},"sourceType":"module"}