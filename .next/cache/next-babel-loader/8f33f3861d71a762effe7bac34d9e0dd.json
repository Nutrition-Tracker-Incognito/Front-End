{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch'; // Use a global to save the user, so we don't have to fetch it again after page navigations\n\nvar userState;\nvar User = React.createContext({\n  user: null,\n  loading: false\n});\nexport var fetchUser = function fetchUser() {\n  var res;\n  return _regeneratorRuntime.async(function fetchUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(userState !== undefined)) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\", userState);\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch('/api/me'));\n\n        case 4:\n          res = _context.sent;\n\n          if (!res.ok) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 8:\n          _context.t0 = _context.sent;\n          _context.next = 12;\n          break;\n\n        case 11:\n          _context.t0 = null;\n\n        case 12:\n          userState = _context.t0;\n          console.log(userState);\n          return _context.abrupt(\"return\", userState);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var UserProvider = function UserProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n  var user = value.user; // If the user was fetched in SSR add it to userState so we don't fetch it again\n\n  React.useEffect(function () {\n    if (!userState && user) {\n      userState = user;\n    }\n  }, []);\n  return __jsx(User.Provider, {\n    value: value\n  }, children);\n};\nexport var useUser = function useUser() {\n  return React.useContext(User);\n};\nexport var useFetchUser = function useFetchUser() {\n  var _React$useState = React.useState({\n    user: userState || null,\n    loading: userState === undefined\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setUser = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (userState !== undefined) {\n      return;\n    }\n\n    var isMounted = true;\n    fetchUser().then(function (user) {\n      // Only set the user if the component is still mounted\n      if (isMounted) {\n        setUser({\n          user: user,\n          loading: false\n        });\n      }\n    });\n    return function () {\n      isMounted = false;\n    };\n  }, [userState]);\n  return data;\n};","map":null,"metadata":{},"sourceType":"module"}